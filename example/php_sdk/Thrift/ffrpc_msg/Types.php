<?php
namespace ffrpc_msg;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


class session_verify_in_t {
  static $_TSPEC;

  public $session_key = null;
  public $online_time = null;
  public $ip = null;
  public $gate_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'online_time',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'gate_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_key'])) {
        $this->session_key = $vals['session_key'];
      }
      if (isset($vals['online_time'])) {
        $this->online_time = $vals['online_time'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['gate_name'])) {
        $this->gate_name = $vals['gate_name'];
      }
    }
  }

  public function getName() {
    return 'session_verify_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->session_key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->online_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gate_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_verify_in_t');
    if ($this->session_key !== null) {
      $xfer += $output->writeFieldBegin('session_key', TType::STRING, 1);
      $xfer += $output->writeString($this->session_key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->online_time !== null) {
      $xfer += $output->writeFieldBegin('online_time', TType::I64, 2);
      $xfer += $output->writeI64($this->online_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 3);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gate_name !== null) {
      $xfer += $output->writeFieldBegin('gate_name', TType::STRING, 4);
      $xfer += $output->writeString($this->gate_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class session_verify_out_t {
  static $_TSPEC;

  public $session_id = null;
  public $err = null;
  public $extra_data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'err',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'extra_data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['err'])) {
        $this->err = $vals['err'];
      }
      if (isset($vals['extra_data'])) {
        $this->extra_data = $vals['extra_data'];
      }
    }
  }

  public function getName() {
    return 'session_verify_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extra_data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_verify_out_t');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::I64, 1);
      $xfer += $output->writeI64($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err !== null) {
      $xfer += $output->writeFieldBegin('err', TType::STRING, 2);
      $xfer += $output->writeString($this->err);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra_data !== null) {
      $xfer += $output->writeFieldBegin('extra_data', TType::STRING, 3);
      $xfer += $output->writeString($this->extra_data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class session_first_entere_in_t {
  static $_TSPEC;

  public $cmd = null;
  public $socket_id = null;
  public $msg_body = null;
  public $ip = null;
  public $gate_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmd',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'socket_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'msg_body',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ip',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'gate_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['socket_id'])) {
        $this->socket_id = $vals['socket_id'];
      }
      if (isset($vals['msg_body'])) {
        $this->msg_body = $vals['msg_body'];
      }
      if (isset($vals['ip'])) {
        $this->ip = $vals['ip'];
      }
      if (isset($vals['gate_name'])) {
        $this->gate_name = $vals['gate_name'];
      }
    }
  }

  public function getName() {
    return 'session_first_entere_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->socket_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg_body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gate_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_first_entere_in_t');
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::I16, 1);
      $xfer += $output->writeI16($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->socket_id !== null) {
      $xfer += $output->writeFieldBegin('socket_id', TType::I64, 2);
      $xfer += $output->writeI64($this->socket_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_body !== null) {
      $xfer += $output->writeFieldBegin('msg_body', TType::STRING, 3);
      $xfer += $output->writeString($this->msg_body);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ip !== null) {
      $xfer += $output->writeFieldBegin('ip', TType::STRING, 4);
      $xfer += $output->writeString($this->ip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gate_name !== null) {
      $xfer += $output->writeFieldBegin('gate_name', TType::STRING, 5);
      $xfer += $output->writeString($this->gate_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class session_first_entere_out_t {
  static $_TSPEC;

  public $uid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'uid',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['uid'])) {
        $this->uid = $vals['uid'];
      }
    }
  }

  public function getName() {
    return 'session_first_entere_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->uid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_first_entere_out_t');
    if ($this->uid !== null) {
      $xfer += $output->writeFieldBegin('uid', TType::I64, 1);
      $xfer += $output->writeI64($this->uid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class session_enter_scene_in_t {
  static $_TSPEC;

  public $session_id = null;
  public $from_group = null;
  public $from_gate = null;
  public $from_scene = null;
  public $to_scene = null;
  public $extra_data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'from_group',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'from_gate',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'from_scene',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'to_scene',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'extra_data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['from_group'])) {
        $this->from_group = $vals['from_group'];
      }
      if (isset($vals['from_gate'])) {
        $this->from_gate = $vals['from_gate'];
      }
      if (isset($vals['from_scene'])) {
        $this->from_scene = $vals['from_scene'];
      }
      if (isset($vals['to_scene'])) {
        $this->to_scene = $vals['to_scene'];
      }
      if (isset($vals['extra_data'])) {
        $this->extra_data = $vals['extra_data'];
      }
    }
  }

  public function getName() {
    return 'session_enter_scene_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_gate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_scene);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->to_scene);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extra_data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_enter_scene_in_t');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::I64, 1);
      $xfer += $output->writeI64($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_group !== null) {
      $xfer += $output->writeFieldBegin('from_group', TType::STRING, 2);
      $xfer += $output->writeString($this->from_group);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_gate !== null) {
      $xfer += $output->writeFieldBegin('from_gate', TType::STRING, 3);
      $xfer += $output->writeString($this->from_gate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_scene !== null) {
      $xfer += $output->writeFieldBegin('from_scene', TType::STRING, 4);
      $xfer += $output->writeString($this->from_scene);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->to_scene !== null) {
      $xfer += $output->writeFieldBegin('to_scene', TType::STRING, 5);
      $xfer += $output->writeString($this->to_scene);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra_data !== null) {
      $xfer += $output->writeFieldBegin('extra_data', TType::STRING, 6);
      $xfer += $output->writeString($this->extra_data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class session_enter_scene_out_t {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'session_enter_scene_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_enter_scene_out_t');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class session_offline_in_t {
  static $_TSPEC;

  public $session_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
    }
  }

  public function getName() {
    return 'session_offline_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_offline_in_t');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::I64, 1);
      $xfer += $output->writeI64($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class session_offline_out_t {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'session_offline_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('session_offline_out_t');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class route_logic_msg_in_t {
  static $_TSPEC;

  public $session_id = null;
  public $cmd = null;
  public $body = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'cmd',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
    }
  }

  public function getName() {
    return 'route_logic_msg_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('route_logic_msg_in_t');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::I64, 1);
      $xfer += $output->writeI64($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::I16, 2);
      $xfer += $output->writeI16($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 3);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class route_logic_msg_out_t {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'route_logic_msg_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('route_logic_msg_out_t');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_change_logic_node_in_t {
  static $_TSPEC;

  public $session_id = null;
  public $alloc_logic_service = null;
  public $cur_group_name = null;
  public $dest_group_name = null;
  public $extra_data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'alloc_logic_service',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'cur_group_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dest_group_name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'extra_data',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['alloc_logic_service'])) {
        $this->alloc_logic_service = $vals['alloc_logic_service'];
      }
      if (isset($vals['cur_group_name'])) {
        $this->cur_group_name = $vals['cur_group_name'];
      }
      if (isset($vals['dest_group_name'])) {
        $this->dest_group_name = $vals['dest_group_name'];
      }
      if (isset($vals['extra_data'])) {
        $this->extra_data = $vals['extra_data'];
      }
    }
  }

  public function getName() {
    return 'gate_change_logic_node_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->alloc_logic_service);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cur_group_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dest_group_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extra_data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_change_logic_node_in_t');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::I64, 1);
      $xfer += $output->writeI64($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alloc_logic_service !== null) {
      $xfer += $output->writeFieldBegin('alloc_logic_service', TType::STRING, 2);
      $xfer += $output->writeString($this->alloc_logic_service);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cur_group_name !== null) {
      $xfer += $output->writeFieldBegin('cur_group_name', TType::STRING, 3);
      $xfer += $output->writeString($this->cur_group_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dest_group_name !== null) {
      $xfer += $output->writeFieldBegin('dest_group_name', TType::STRING, 4);
      $xfer += $output->writeString($this->dest_group_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra_data !== null) {
      $xfer += $output->writeFieldBegin('extra_data', TType::STRING, 5);
      $xfer += $output->writeString($this->extra_data);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_change_logic_node_out_t {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'gate_change_logic_node_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_change_logic_node_out_t');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_close_session_in_t {
  static $_TSPEC;

  public $session_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
    }
  }

  public function getName() {
    return 'gate_close_session_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->session_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_close_session_in_t');
    if ($this->session_id !== null) {
      $xfer += $output->writeFieldBegin('session_id', TType::I64, 1);
      $xfer += $output->writeI64($this->session_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_close_session_out_t {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'gate_close_session_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_close_session_out_t');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_route_msg_to_session_in_t {
  static $_TSPEC;

  public $session_id = null;
  public $cmd = null;
  public $body = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'session_id',
          'type' => TType::LST,
          'etype' => TType::I64,
          'elem' => array(
            'type' => TType::I64,
            ),
          ),
        2 => array(
          'var' => 'cmd',
          'type' => TType::I16,
          ),
        3 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['session_id'])) {
        $this->session_id = $vals['session_id'];
      }
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
    }
  }

  public function getName() {
    return 'gate_route_msg_to_session_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->session_id = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->session_id []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_route_msg_to_session_in_t');
    if ($this->session_id !== null) {
      if (!is_array($this->session_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('session_id', TType::LST, 1);
      {
        $output->writeListBegin(TType::I64, count($this->session_id));
        {
          foreach ($this->session_id as $iter6)
          {
            $xfer += $output->writeI64($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::I16, 2);
      $xfer += $output->writeI16($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 3);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_route_msg_to_session_out_t {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'gate_route_msg_to_session_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_route_msg_to_session_out_t');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_broadcast_msg_to_session_in_t {
  static $_TSPEC;

  public $cmd = null;
  public $body = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmd',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
    }
  }

  public function getName() {
    return 'gate_broadcast_msg_to_session_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_broadcast_msg_to_session_in_t');
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::I16, 1);
      $xfer += $output->writeI16($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 2);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class gate_broadcast_msg_to_session_out_t {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'gate_broadcast_msg_to_session_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('gate_broadcast_msg_to_session_out_t');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class scene_call_msg_in_t {
  static $_TSPEC;

  public $cmd = null;
  public $body = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'cmd',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['cmd'])) {
        $this->cmd = $vals['cmd'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
    }
  }

  public function getName() {
    return 'scene_call_msg_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->cmd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('scene_call_msg_in_t');
    if ($this->cmd !== null) {
      $xfer += $output->writeFieldBegin('cmd', TType::I16, 1);
      $xfer += $output->writeI16($this->cmd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 2);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class scene_call_msg_out_t {
  static $_TSPEC;

  public $err = null;
  public $msg_type = null;
  public $body = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'err',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'msg_type',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['err'])) {
        $this->err = $vals['err'];
      }
      if (isset($vals['msg_type'])) {
        $this->msg_type = $vals['msg_type'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
    }
  }

  public function getName() {
    return 'scene_call_msg_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->msg_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('scene_call_msg_out_t');
    if ($this->err !== null) {
      $xfer += $output->writeFieldBegin('err', TType::STRING, 1);
      $xfer += $output->writeString($this->err);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msg_type !== null) {
      $xfer += $output->writeFieldBegin('msg_type', TType::STRING, 2);
      $xfer += $output->writeString($this->msg_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 3);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class register_to_broker_in_t {
  static $_TSPEC;

  public $node_type = null;
  public $host = null;
  public $service_name = null;
  public $node_id = null;
  public $reg_namespace = null;
  public $bind_broker_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'node_type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'service_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'node_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'reg_namespace',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'bind_broker_id',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['node_type'])) {
        $this->node_type = $vals['node_type'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
      if (isset($vals['service_name'])) {
        $this->service_name = $vals['service_name'];
      }
      if (isset($vals['node_id'])) {
        $this->node_id = $vals['node_id'];
      }
      if (isset($vals['reg_namespace'])) {
        $this->reg_namespace = $vals['reg_namespace'];
      }
      if (isset($vals['bind_broker_id'])) {
        $this->bind_broker_id = $vals['bind_broker_id'];
      }
    }
  }

  public function getName() {
    return 'register_to_broker_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->node_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->service_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->node_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg_namespace);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bind_broker_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('register_to_broker_in_t');
    if ($this->node_type !== null) {
      $xfer += $output->writeFieldBegin('node_type', TType::I32, 1);
      $xfer += $output->writeI32($this->node_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service_name !== null) {
      $xfer += $output->writeFieldBegin('service_name', TType::STRING, 3);
      $xfer += $output->writeString($this->service_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->node_id !== null) {
      $xfer += $output->writeFieldBegin('node_id', TType::I64, 4);
      $xfer += $output->writeI64($this->node_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_namespace !== null) {
      $xfer += $output->writeFieldBegin('reg_namespace', TType::STRING, 5);
      $xfer += $output->writeString($this->reg_namespace);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bind_broker_id !== null) {
      $xfer += $output->writeFieldBegin('bind_broker_id', TType::I64, 6);
      $xfer += $output->writeI64($this->bind_broker_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class register_to_broker_out_t {
  static $_TSPEC;

  public $register_flag = null;
  public $node_id = null;
  public $service2node_id = null;
  public $slave_broker_data = null;
  public $rpc_bind_broker_info = null;
  public $reg_namespace_list = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'register_flag',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'node_id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'service2node_id',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        4 => array(
          'var' => 'slave_broker_data',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        5 => array(
          'var' => 'rpc_bind_broker_info',
          'type' => TType::MAP,
          'ktype' => TType::I64,
          'vtype' => TType::I64,
          'key' => array(
            'type' => TType::I64,
          ),
          'val' => array(
            'type' => TType::I64,
            ),
          ),
        6 => array(
          'var' => 'reg_namespace_list',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['register_flag'])) {
        $this->register_flag = $vals['register_flag'];
      }
      if (isset($vals['node_id'])) {
        $this->node_id = $vals['node_id'];
      }
      if (isset($vals['service2node_id'])) {
        $this->service2node_id = $vals['service2node_id'];
      }
      if (isset($vals['slave_broker_data'])) {
        $this->slave_broker_data = $vals['slave_broker_data'];
      }
      if (isset($vals['rpc_bind_broker_info'])) {
        $this->rpc_bind_broker_info = $vals['rpc_bind_broker_info'];
      }
      if (isset($vals['reg_namespace_list'])) {
        $this->reg_namespace_list = $vals['reg_namespace_list'];
      }
    }
  }

  public function getName() {
    return 'register_to_broker_out_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->register_flag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->node_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->service2node_id = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = '';
              $val13 = 0;
              $xfer += $input->readString($key12);
              $xfer += $input->readI64($val13);
              $this->service2node_id[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->slave_broker_data = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = 0;
              $xfer += $input->readString($key19);
              $xfer += $input->readI64($val20);
              $this->slave_broker_data[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->rpc_bind_broker_info = array();
            $_size21 = 0;
            $_ktype22 = 0;
            $_vtype23 = 0;
            $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $key26 = 0;
              $val27 = 0;
              $xfer += $input->readI64($key26);
              $xfer += $input->readI64($val27);
              $this->rpc_bind_broker_info[$key26] = $val27;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->reg_namespace_list = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readString($elem33);
              $this->reg_namespace_list []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('register_to_broker_out_t');
    if ($this->register_flag !== null) {
      $xfer += $output->writeFieldBegin('register_flag', TType::I16, 1);
      $xfer += $output->writeI16($this->register_flag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->node_id !== null) {
      $xfer += $output->writeFieldBegin('node_id', TType::I64, 2);
      $xfer += $output->writeI64($this->node_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->service2node_id !== null) {
      if (!is_array($this->service2node_id)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('service2node_id', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->service2node_id));
        {
          foreach ($this->service2node_id as $kiter34 => $viter35)
          {
            $xfer += $output->writeString($kiter34);
            $xfer += $output->writeI64($viter35);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->slave_broker_data !== null) {
      if (!is_array($this->slave_broker_data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('slave_broker_data', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::I64, count($this->slave_broker_data));
        {
          foreach ($this->slave_broker_data as $kiter36 => $viter37)
          {
            $xfer += $output->writeString($kiter36);
            $xfer += $output->writeI64($viter37);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rpc_bind_broker_info !== null) {
      if (!is_array($this->rpc_bind_broker_info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rpc_bind_broker_info', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::I64, TType::I64, count($this->rpc_bind_broker_info));
        {
          foreach ($this->rpc_bind_broker_info as $kiter38 => $viter39)
          {
            $xfer += $output->writeI64($kiter38);
            $xfer += $output->writeI64($viter39);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_namespace_list !== null) {
      if (!is_array($this->reg_namespace_list)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('reg_namespace_list', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->reg_namespace_list));
        {
          foreach ($this->reg_namespace_list as $iter40)
          {
            $xfer += $output->writeString($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class broker_route_msg_in_t {
  static $_TSPEC;

  public $dest_namespace = null;
  public $dest_service_name = null;
  public $dest_msg_name = null;
  public $dest_node_id = null;
  public $from_namespace = null;
  public $from_node_id = null;
  public $callback_id = null;
  public $body = null;
  public $err_info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'dest_namespace',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'dest_service_name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dest_msg_name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'dest_node_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'from_namespace',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'from_node_id',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'callback_id',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'body',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'err_info',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['dest_namespace'])) {
        $this->dest_namespace = $vals['dest_namespace'];
      }
      if (isset($vals['dest_service_name'])) {
        $this->dest_service_name = $vals['dest_service_name'];
      }
      if (isset($vals['dest_msg_name'])) {
        $this->dest_msg_name = $vals['dest_msg_name'];
      }
      if (isset($vals['dest_node_id'])) {
        $this->dest_node_id = $vals['dest_node_id'];
      }
      if (isset($vals['from_namespace'])) {
        $this->from_namespace = $vals['from_namespace'];
      }
      if (isset($vals['from_node_id'])) {
        $this->from_node_id = $vals['from_node_id'];
      }
      if (isset($vals['callback_id'])) {
        $this->callback_id = $vals['callback_id'];
      }
      if (isset($vals['body'])) {
        $this->body = $vals['body'];
      }
      if (isset($vals['err_info'])) {
        $this->err_info = $vals['err_info'];
      }
    }
  }

  public function getName() {
    return 'broker_route_msg_in_t';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dest_namespace);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dest_service_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->dest_msg_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dest_node_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->from_namespace);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->from_node_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->callback_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->body);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->err_info);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('broker_route_msg_in_t');
    if ($this->dest_namespace !== null) {
      $xfer += $output->writeFieldBegin('dest_namespace', TType::STRING, 1);
      $xfer += $output->writeString($this->dest_namespace);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dest_service_name !== null) {
      $xfer += $output->writeFieldBegin('dest_service_name', TType::STRING, 2);
      $xfer += $output->writeString($this->dest_service_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dest_msg_name !== null) {
      $xfer += $output->writeFieldBegin('dest_msg_name', TType::STRING, 3);
      $xfer += $output->writeString($this->dest_msg_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dest_node_id !== null) {
      $xfer += $output->writeFieldBegin('dest_node_id', TType::I64, 4);
      $xfer += $output->writeI64($this->dest_node_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_namespace !== null) {
      $xfer += $output->writeFieldBegin('from_namespace', TType::STRING, 5);
      $xfer += $output->writeString($this->from_namespace);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->from_node_id !== null) {
      $xfer += $output->writeFieldBegin('from_node_id', TType::I64, 6);
      $xfer += $output->writeI64($this->from_node_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->callback_id !== null) {
      $xfer += $output->writeFieldBegin('callback_id', TType::I64, 7);
      $xfer += $output->writeI64($this->callback_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->body !== null) {
      $xfer += $output->writeFieldBegin('body', TType::STRING, 8);
      $xfer += $output->writeString($this->body);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->err_info !== null) {
      $xfer += $output->writeFieldBegin('err_info', TType::STRING, 9);
      $xfer += $output->writeString($this->err_info);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


